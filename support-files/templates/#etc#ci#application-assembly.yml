# 单服务的配置文件模板，整合了所有微服务模块
spring:
  datasource:
    url: jdbc:mysql://__MYSQL_IP0__:__MYSQL_PORT__/devops_ci_process?useSSL=false&autoReconnect=true&timezone=+800&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
    username: __MYSQL_USER__
    password: __MYSQL_PASS__

server:
  port: 21900

#### Artifactory
# 以下为构件存储目录，需要做分布式分享
# 如果微服务是部署多机节点，则以下目录需要做成分布式高可用的，比如NFS，CephFS挂载
# 保证多节点都能读取到
artifactory:
  archiveLocalBasePath: __INSTALL_PATH__/public/__MODULE__/artifactory
  archiveJFrogBasePath: /tmp

# 自已有部署Jfrog的可以对接
jfrog:
  url: __JFROG_URL__
  docker_url: __DOCKER_URL__
  docker_port: __DOCKER_PORT__
  username: __JFROG_USERNAME__
  password: __JFROG_PASSWORD__

#### Dispatch
dispatch:
  workerFile: __INSTALL_PATH__/__MODULE__/agent-package/jar/worker-agent.jar
  dockerFile: __INSTALL_PATH__/__MODULE__/agent-package/jar/worker-agent.jar
  scripts: __INSTALL_PATH__/__MODULE__/agent-package/script
  dockerBuildImagePrefix: __DOCKER_IMAGE_PREFIX__:__DOCKER_PORT__/paas/bkdevops
  defaultImageUrl: __DOCKER_IMAGE_PREFIX__:__DOCKER_PORT__/paas/bkdevops/centos7.2:v1
  defaultImageName: centos7.2
  dockerhostPort: __BKCI_DOCKERHOST_API_PORT__

codecc:
  path: __INSTALL_PATH__/public/codecc/tools
  covFile: build_dev.py
  toolFile: build_tool_dev.py

#### environment

environment:
  agent-package: __INSTALL_PATH__/__MODULE__/agent-package
  agentCollectorOn: __AGENT_COLLECTOR_ON__

influxdb:
  server: __INFLUXDB_SERVER__
  userName: __INFLUXDB_USERNAME__
  password: __INFLUXDB_PASSWORD__

#### DockerHost


# docker client 配置
dockerCli:
  volumeWorkspace: /data/bkdevops/workspace
  volumeApps: /data/bkdevops/apps/
  volumeInit: /data/init.sh
  volumeSleep: /data/bkdevops/sleep.sh
  volumeLogs: /data/bkdevops/logs
  volumeCodecc: /data/bkdevops/codecc/
  volumeProjectShare: /data/bkdevops/share
  volumeMavenRepo: /root/.m2/repository
  volumeNpmPrefix: /root/Downloads/npm/prefix
  volumeNpmCache: /root/Downloads/npm/cache
  volumeNpmRc: /root/.npmrc
  volumeCcache: /root/.ccache
  volumeGradleCache: /root/.gradle/caches
  hostPathLinkDir: /tmp/bkci
  hostPathHosts: /etc/hosts
  dockerHost: unix:///var/run/docker.sock
  dockerConfig: /root/.docker
  apiVersion: 1.23
  # docker hub 配置
  registryUrl: __DOCKER_REGISTRY_URL__
  registryUsername: __DOCKER_REGISTRY_USERNAME__
  registryPassword: __DOCKER_REGISTRY_PASSWORD__

  # 以下一般不用修改

  # docker 母机上的配置，workspace用于存放构建的工作空间，可以以挂载的方式提供
  hostPathWorkspace: __INSTALL_PATH__/public/__MODULE__/docker/workspace
  hostPathApps: __INSTALL_PATH__/public/__MODULE__/docker/apps/
  hostPathInit: __INSTALL_PATH__/__MODULE__/agent-package/script/init.sh
  hostPathSleep: __INSTALL_PATH__/__MODULE__/agent-package/script/sleep.sh
  hostPathLogs: __INSTALL_PATH__/logs/__MODULE__/docker
  hostPathCodecc: /data/bkdevops/codecc
  hostPathProjectShare: __INSTALL_PATH__/public/__MODULE__/docker/share/project
  hostPathMavenRepo: __INSTALL_PATH__/public/__MODULE__/docker/thirdparty/maven_repo
  hostPathNpmPrefix: __INSTALL_PATH__/public/__MODULE__/docker/thirdparty/npm_prefix
  hostPathNpmCache: __INSTALL_PATH__/public/__MODULE__/docker/thirdparty/npm_cache
  hostPathNpmRc: __INSTALL_PATH__/public/__MODULE__/docker/thirdparty/.npmrc
  hostPathCcache: __INSTALL_PATH__/public/__MODULE__/docker/thirdparty/ccache/
  hostPathGradleCache: __INSTALL_PATH__/public/__MODULE__/docker/thirdparty/gradle_caches
  # 需要共享的项目
  shareProjectCodeWhiteList:
  # docker.jar 存储路径
  dockerAgentPath: __INSTALL_PATH__/__MODULE__/agent-package/worker-agent.jar
  downloadDockerAgentUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/ms/dispatch/gw/build/docker.jar
  # 定期下载
  downloadAgentCron: 0 0 3 * * ?
  landunEnv: prod
  clearLocalImageCron: 0 0 2 * * ?
  localImageCacheDays: 7

#### image

image:
  dockerCli:
    dockerHost: unix:///var/run/docker.sock
    dockerConfig: /root/.docker
    apiVersion: 1.23
    registryUrl: __JFROG_URL__
    registryUsername: __DOCKER_REGISTRY_USERNAME__
    registryPassword: __DOCKER_REGISTRY_PASSWORD__
    imagePrefix: __DOCKER_IMAGE_PREFIX__:__DOCKER_PORT__

#### log

elasticsearch:
  ip: __BKCI_ES_IP__
  port: __BKCI_ES_PORT__
  cluster: bkee-es
#  ES集群如果要求证书验证的场景，需要需要打开以下4个配置项， 设置keystore文件和truststore文件以及密码
#  keystore:
#    filePath:
#    password:
#  truststore:
#    filePath:
#    password:

#### plugin

plugin:
  codecc:
    path: __INSTALL_PATH__/public/codecc/tools
    covFile: build_dev.py
    toolFile: build_tool_dev.py

#### project
# 蓝鲸登录平台API地址，对接蓝鲸平台时才需要用到
bk_login:
  path: __HTTP_SCHEMA__://__PAAS_FQDN__:__PAAS_HTTPS_PORT__/api/c/compapi/v2/bk_login/
  getUser: get_user/
  getAllUser: get_all_users/
  bk_app_code: __APP_CODE__
  bk_app_secret: __APP_TOKEN_

#### repository

repository:
  git: # git 管理私有Token，一般不用，用于插件库分组
    devopsPrivateToken: __DEVOPS_GIT_PRIVATE_TOKEN__
    devopsGroupName: __DEVOPS_GIT_PLUGIN_GROUP_NAME__

scm:
  #svn open api url，如果不需要则放着即可
  svn:
    apiKey: __SVN_API_KEY__
    apiUrl: __SVN_URL__/rest
    webhookApiUrl: __SVN_URL__/rest/webhooks
    svnHookUrl: __HTTP_SCHEMA__://__BKCI_FQDN__/ms/process/api/external/scm/codesvn/commit
  # git 仓库配置，如果不需要则放着即可
  git:
    url: __GIT_URL__
    apiUrl: __GIT_URL__/api/v3
    clientId: clientId
    clientSecret: Secret
    redirectUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/codelib
    redirectAtomMarketUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/store/atomList
    gitHookUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/ms/process/api/external/scm/codegit/commit
    public:
      account: devops
      email: devops@devops.com
      secret: devops123
  external:
    #gitlab typo repository
    gitlab:
      apiUrl: __GITLAB_URL__/api/v4
      gitlabHookUrl: __HTTP_SCHEMA__://__BKCI_FQDN__/ms/process/api/external/scm/gitlab/commit
    github:
      clientId: __GITHUB_CLIENT_ID__
      clientSecret: __GITHUB_CLIENT_SECRET__
      callbackUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/external/api/external/github/oauth/callback
      redirectUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/codelib
      appUrl: https://github.com/apps/__GITHUB_APP__
      signSecret: __GITHUB_SIGN_SECRET__

#### store

store:
  commentNotifyAdmin: admin
  profileUrlPrefix: __HTTP_SCHEMA__://__PAAS_USER_AVATARS_URL__
  atomDetailBaseUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/store/atomStore/detail/atom/
  templateDetailBaseUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/store/atomStore/detail/template/
  artifactoryServiceUrlPrefix: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/ms/artifactory/api
  ideAtomDetailBaseUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/store/atomStore/detail/ide/
  imageDetailBaseUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/store/atomStore/detail/image/
  baseImageDocsLink: /console/store/atomStore/detail/image/
  imageAdminUsers: admin
  buildResultBaseUrl: __HTTP_SCHEMA__://__BKCI_FQDN__:__BKCI_HTTP_PORT__/console/pipeline
  defaultImageSourceType: bkdevops
  defaultImageRepoUrl: __HTTP_SCHEMA__://__JFROG_FQDN__:__DOCKER_PORT__
  defaultImageRepoName: paas/bkdevops/docker-builder2.2
  defaultImageTag: v1
  defaultTicketId:
  defaultTicketProject:
  defaultImageRDType: SELF_DEVELOPED
  imageExecuteNullNotifyTplCode: IMAGE_EXECUTE_NULL_NOTIFY_TPL
  templateApproveSwitch: close
  imageApproveSwitch: close

logo:
  allowUploadLogoTypes: jpg,png,svg
  allowUploadLogoWidth: 200
  allowUploadLogoHeight: 200
  maxUploadLogoSize: 2097152

aes:
  # 部署前修改好，后续升级如果再修改，会导致历史数据读取不了，所以如果修改需要先解密重新入库
  aesKey: "J%k^yO{?vt}3tXpG"
  aesMock: "******"


#### ticket

cert:
  # 部署前修改好，后续升级如果再修改，会导致历史数据读取不了，所以如果修改需要先解密重新入库
  aes-key: "gHi(xG9Af)jEvCx&"

credential:
  mixer: "******"
  # 部署前修改好，后续升级如果再修改，会导致历史数据读取不了，所以如果修改需要先解密重新入库
  aes-key: "G/I%yP{?ST}2TXPg"

#### websocket

thread:
  min: 8

#### process

# 流水线加密参数密钥
parameter:
  password:
    pswKey: __PASSWORD_KEY__